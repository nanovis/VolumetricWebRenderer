struct Param 
{
	mousePosX : f32,
	mousePosY : f32,
	param2 : f32,
	param3 : f32,
	
	volumeSize : vec4<u32>,
	annotationVolume : vec4<f32>,
	vertex : vec4<f32>,
	pingPong : vec4<f32>,
	kernelSize : vec4<f32>,
	clippingPlaneOrigin : vec4<f32>,
	clippingPlaneNormal : vec4<f32>,
}

struct Plane 
{
	position : vec3<f32>,
	normal : vec3<f32>,
}

struct Ray 
{
	origin : vec3<f32>,
	direction : vec3<f32>,
}

struct Intersection 
{
	intersects : bool,
	position : vec3<f32>,
}

@group(0) @binding(0) var<uniform> param : Param;
@group(0) @binding(1) var output : texture_storage_3d<rgba8unorm, write>;
@group(0) @binding(2) var input : texture_3d<f32>;

fn intersect_plane(ray: Ray, p : Plane) -> Intersection
{
	var d = -dot(p.position, p.normal);
	var v = dot(ray.direction, p.normal);
	var t = -(dot(ray.origin, p.normal) + d) / v;
	
	var intersection : Intersection;
	intersection.intersects = false;
	
	if(t > 0.0)
	{
		intersection.intersects = true;
		intersection.position = ray.origin * t * ray.direction;
	}
		
	return intersection;
}

fn apply_brush(pos : vec3<f32>, delta : vec3<i32>, copy : bool)
{
	var kernel = vec3<i32>(i32(param.kernelSize.x), i32(param.kernelSize.y), i32(param.kernelSize.z));
	
	var strength = pow(f32(delta.x*delta.x)/f32(kernel.x) + 
					f32(delta.y*delta.y)/f32(kernel.y) +
					f32(delta.z*delta.z)/f32(kernel.z)
					, 0.5);

	if(strength > 1.0) {
		return;
	}
	var tex_coord = vec3<i32>(i32(pos.x * f32(param.volumeSize.x)), 
							i32(pos.y * f32(param.volumeSize.y)),
							i32(pos.z * f32(param.volumeSize.z)));
	
	var tex_coord_kernel = tex_coord + delta;
	var sample = textureLoad(input, tex_coord_kernel, 0).rgba;
	var result = sample;
	//var result = vec4<f32>(sample.x, sample.y, sample.z, 1.0);
	if(!copy) 
	{
		var density = 0.5 - cos((1.0 - strength) * 3.141592) * 0.5;	

		if(!bool(param.param2)) {
			density = - density;
		}
		
		if(bool(param.annotationVolume.x == 0.0)) {
			result.x = clamp(result.x + density, 0.0, 1.0);
		}
		if(bool(param.annotationVolume.x == 1.0)) {
			result.y = clamp(result.y + density, 0.0, 1.0);
		}
		if(bool(param.annotationVolume.x == 2.0)) {
			result.z = clamp(result.z + density, 0.0, 1.0);
		}
		if(bool(param.annotationVolume.x == 3.0)) {
			result.w = clamp(result.w + density, 0.0, 1.0);				
		}
	}
	textureStore(output, tex_coord_kernel, result);	
}

@compute @workgroup_size(4, 4, 4)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) 
{
	var kernel = vec3<i32>(i32(param.kernelSize.x), i32(param.kernelSize.y), i32(param.kernelSize.z));
	
	// Guard against out-of-bounds work group sizes
	if (global_id.x >= u32(kernel.x * 2 + 1) || global_id.y >= u32(kernel.y * 2 + 1) || global_id.z >= u32(kernel.z * 2 + 1)) {
		return;
	}
	
	
	var delta = vec3<i32>(kernel.x - i32(global_id.x), kernel.z - i32(global_id.y), kernel.z - i32(global_id.z));	
	var copy = bool(param.pingPong.x);
	
	apply_brush(vec3<f32>(param.vertex.x, param.vertex.y, param.vertex.z), delta, copy);	
}